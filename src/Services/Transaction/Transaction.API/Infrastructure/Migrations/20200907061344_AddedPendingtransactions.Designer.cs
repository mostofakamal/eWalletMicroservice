// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transaction.Infrastructure;

namespace Transaction.API.Infrastructure.Migrations
{
    [DbContext(typeof(TransactionContext))]
    [Migration("20200907061344_AddedPendingtransactions")]
    partial class AddedPendingtransactions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Transaction.Domain.AggregateModel.PendingTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("HandledOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 7, 6, 13, 43, 676, DateTimeKind.Utc).AddTicks(470));

                    b.Property<int>("_receiverUserId")
                        .HasColumnName("ReceiverUserId")
                        .HasColumnType("int");

                    b.Property<int>("_senderUserId")
                        .HasColumnName("SenderUserId")
                        .HasColumnType("int");

                    b.Property<int>("_transactionTypeId")
                        .HasColumnName("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("_receiverUserId");

                    b.HasIndex("_senderUserId");

                    b.HasIndex("_transactionTypeId");

                    b.ToTable("PendingTransactions");
                });

            modelBuilder.Entity("Transaction.Domain.AggregateModel.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CounterPartyUserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 9, 7, 6, 13, 43, 643, DateTimeKind.Utc).AddTicks(3159));

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150)
                        .HasDefaultValue("");

                    b.Property<Guid>("TransactionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("_transactionStatusId")
                        .HasColumnName("TransactionStatusId")
                        .HasColumnType("int");

                    b.Property<int>("_transactionTypeId")
                        .HasColumnName("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("_transactionStatusId");

                    b.HasIndex("_transactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Transaction.Domain.AggregateModel.TransactionStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TransactionStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Failed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ok"
                        });
                });

            modelBuilder.Entity("Transaction.Domain.AggregateModel.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TransactionType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Transfer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BillPayment"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reward"
                        });
                });

            modelBuilder.Entity("Transaction.Domain.AggregateModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTransactionEligible")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserIdentityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Transaction.Domain.AggregateModel.PendingTransaction", b =>
                {
                    b.HasOne("Transaction.Domain.AggregateModel.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("_receiverUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Transaction.Domain.AggregateModel.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("_senderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Transaction.Domain.AggregateModel.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("_transactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transaction.Domain.AggregateModel.Transaction", b =>
                {
                    b.HasOne("Transaction.Domain.AggregateModel.User", null)
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.HasOne("Transaction.Domain.AggregateModel.TransactionStatus", "TransactionStatus")
                        .WithMany()
                        .HasForeignKey("_transactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transaction.Domain.AggregateModel.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("_transactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
