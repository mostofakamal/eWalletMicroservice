// <auto-generated />
using System;
using Kyc.Insfrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kyc.API.Infrastructure.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20200818143420_KycCreatedDateAdded")]
    partial class KycCreatedDateAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kyc.Domain.AggregateModel.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CountryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryGuid = new Guid("394a3be9-bd16-4daa-9642-0bebb70fe8e6"),
                            CurrencyCode = "BDT",
                            IsoCode = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 2,
                            CountryGuid = new Guid("7d40a97f-409e-4155-a2fc-fcb574d1f787"),
                            CurrencyCode = "INR",
                            IsoCode = "IN",
                            Name = "India"
                        },
                        new
                        {
                            Id = 3,
                            CountryGuid = new Guid("d45c4ff8-98bf-4186-8bba-ffc7dafb471b"),
                            CurrencyCode = "NOK",
                            IsoCode = "NO",
                            Name = "Norway"
                        });
                });

            modelBuilder.Entity("Kyc.Domain.AggregateModel.KycInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<short>("KycStatusId")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KycStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Kycs");
                });

            modelBuilder.Entity("Kyc.Domain.AggregateModel.KycStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KycStatuses");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "Failed"
                        });
                });

            modelBuilder.Entity("Kyc.Domain.AggregateModel.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsKycVerified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Kyc.Domain.AggregateModel.KycInformation", b =>
                {
                    b.HasOne("Kyc.Domain.AggregateModel.KycStatus", "KycStatus")
                        .WithMany()
                        .HasForeignKey("KycStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kyc.Domain.AggregateModel.User", "User")
                        .WithMany("KycInformations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kyc.Domain.AggregateModel.User", b =>
                {
                    b.HasOne("Kyc.Domain.AggregateModel.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
